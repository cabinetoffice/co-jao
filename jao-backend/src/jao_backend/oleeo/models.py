# Originally generated by inspectdb
# Primary keys and managers have been added.
from django.db import models

from jao_backend.oleeo.base_models import OleeoUpstreamModel
from jao_backend.oleeo.querysets import VacanciesQuerySet


class Applications(OleeoUpstreamModel):
    application_id = models.IntegerField(primary_key=True)
    vacancy = models.ForeignKey(
        "Vacancies",
        models.DO_NOTHING,
        db_column="vacancy_id",
        related_name="applications",
    )
    application_status = models.ForeignKey(
        "ListApplicationstatus",
        models.DO_NOTHING,
        db_column="application_status_id",
        related_name="applications",
        blank=True,
        null=True,
    )
    applicant_type = models.ForeignKey(
        "ListApplicanttype",
        models.DO_NOTHING,
        db_column="applicant_type_id",
        related_name="applications",
        blank=True,
        null=True,
    )
    employment_history = models.TextField(blank=True, null=True)

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "Applications"


class Vacancies(OleeoUpstreamModel):
    destination_model = "vacancies.Vacancy"

    vacancy_id = models.IntegerField(primary_key=True)
    vacancy_title = models.TextField()
    job_grade = models.ForeignKey(
        "ListJobGrade",
        models.DO_NOTHING,
        db_column="job_grade_id",
        related_name="vacancies",
        blank=True,
        null=True,
    )
    department = models.ForeignKey(
        "ListDepartment",
        models.DO_NOTHING,
        db_column="department_id",
        related_name="vacancies",
        blank=True,
        null=True,
    )
    profession = models.ForeignKey(
        "ListProfession",
        models.DO_NOTHING,
        db_column="profession_id",
        related_name="vacancies",
        blank=True,
        null=True,
    )
    type_of_role = models.ForeignKey(
        "ListTypeOfRole",
        models.DO_NOTHING,
        db_column="type_of_role_id",
        related_name="vacancies",
        blank=True,
        null=True,
    )
    city_town = models.ForeignKey(
        "ListCityTown",
        models.DO_NOTHING,
        db_column="city_town_id",
        related_name="vacancies",
        blank=True,
        null=True,
    )
    vacancy_postcode = models.ForeignKey(
        "ListVacancyPostcode",
        models.DO_NOTHING,
        db_column="vacancy_postcode_id",
        related_name="vacancies",
        blank=True,
        null=True,
    )
    region = models.ForeignKey(
        "ListRegion",
        models.DO_NOTHING,
        db_column="region_id",
        related_name="vacancies",
        blank=True,
        null=True,
    )
    vacancy_status = models.ForeignKey(
        "ListVacancyStatus",
        models.DO_NOTHING,
        db_column="vacancy_status_id",
        related_name="vacancies",
        blank=True,
        null=True,
    )
    business_area = models.ForeignKey(
        "ListBusinessArea",
        models.DO_NOTHING,
        db_column="business_area_id",
        related_name="vacancies",
        blank=True,
        null=True,
    )
    vacancy_approach = models.ForeignKey(
        "ListVacancyApproach",
        models.DO_NOTHING,
        db_column="vacancy_approach_id",
        related_name="vacancies",
        blank=True,
        null=True,
    )
    number_of_jobs = models.IntegerField(blank=True, null=True)
    location_type = models.ForeignKey(
        "ListLocationType",
        models.DO_NOTHING,
        db_column="location_type_id",
        related_name="vacancies",
        blank=True,
        null=True,
    )
    salary_minimum = models.TextField(blank=True, null=True)
    """Note: OLEEO Salary is a VARCHAR, JAO excludes non null or Numeric entries"""
    salary_maximum_optional = models.TextField(blank=True, null=True)
    """Note: OLEEO Salary is a VARCHAR, JAO excludes non null or Numeric entries"""
    job_summary = models.TextField(blank=True, null=True)
    job_description = models.TextField(blank=True, null=True)
    person_specification = models.TextField(blank=True, null=True)
    row_last_updated = models.DateTimeField()

    objects = VacanciesQuerySet.as_manager()
    """
    Use a custom query manager as vacancy data needs to exclude non-numeric salary values.
    """

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "Vacancies"
        app_label = "oleeo"


class Dandi(OleeoUpstreamModel):
    application = models.OneToOneField(
        Applications,
        models.DO_NOTHING,
        db_column="application_id",
        primary_key=True,
        related_name="dandi",
    )
    disability = models.ForeignKey(
        "ListDisability",
        models.DO_NOTHING,
        db_column="disability_id",
        related_name="dandi",
        blank=True,
        null=True,
    )
    sexual_orientation = models.ForeignKey(
        "ListSexualOrientation",
        models.DO_NOTHING,
        db_column="sexual_orientation_id",
        related_name="dandi",
        blank=True,
        null=True,
    )
    age_group = models.ForeignKey(
        "ListAgeGroup",
        models.DO_NOTHING,
        db_column="age_group_id",
        related_name="dandi",
        blank=True,
        null=True,
    )
    ethnic_group = models.ForeignKey(
        "ListEthnicGroup",
        models.DO_NOTHING,
        db_column="ethnic_group_id",
        related_name="dandi",
        blank=True,
        null=True,
    )
    religion = models.ForeignKey(
        "ListReligion",
        models.DO_NOTHING,
        db_column="religion_id",
        related_name="dandi",
        blank=True,
        null=True,
    )
    ethnicity = models.ForeignKey(
        "ListEthnicity",
        models.DO_NOTHING,
        db_column="ethnicity_id",
        related_name="dandi",
        blank=True,
        null=True,
    )
    gender = models.ForeignKey(
        "ListGender",
        models.DO_NOTHING,
        db_column="gender_id",
        related_name="dandi",
        blank=True,
        null=True,
    )
    postcode = models.ForeignKey(
        "ListPostcode",
        models.DO_NOTHING,
        db_column="postcode_id",
        related_name="dandi",
        blank=True,
        null=True,
    )
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "DandI"


class ListAgeGroup(OleeoUpstreamModel):
    age_group_id = models.AutoField(primary_key=True)
    age_group_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    destination_model = "application_statistics.AgeGroup"

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_AgeGroup"


class ListApplicantType(OleeoUpstreamModel):
    applicant_type_id = models.AutoField(primary_key=True)
    applicant_type_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_ApplicantType"


class ListApplicationStatus(OleeoUpstreamModel):
    application_status_id = models.AutoField(primary_key=True)
    application_status_desc = models.TextField()
    application_status_list_id = models.IntegerField()
    terminal_status = models.BooleanField()
    status_group_desc = models.TextField(blank=True, null=True)
    row_last_updated = models.DateTimeField()
    status_progress_desc = models.TextField(blank=True, null=True)
    status_group_detailed_desc = models.TextField(blank=True, null=True)

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_ApplicationStatus"


class ListBusinessArea(OleeoUpstreamModel):
    business_area_id = models.AutoField(primary_key=True)
    business_area_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_BusinessArea"


class ListCityTown(OleeoUpstreamModel):
    city_town_id = models.AutoField(primary_key=True)
    city_town_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_CityTown"


class ListDepartment(OleeoUpstreamModel):
    department_id = models.AutoField(primary_key=True)
    department_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_Department"


class ListDisability(OleeoUpstreamModel):
    disability_id = models.AutoField(primary_key=True)
    disability_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    destination_model = "application_statistics.Disability"

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_Disability"


class ListEthnicGroup(OleeoUpstreamModel):
    ethnic_group_id = models.AutoField(primary_key=True)
    ethnic_group_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    destination_model = "application_statistics.EthnicGroup"

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_EthnicGroup"


class ListEthnicity(OleeoUpstreamModel):
    ethnicity_id = models.AutoField(primary_key=True)
    ethnicity_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    destination_model = "application_statistics.Ethnicity"

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_Ethnicity"


class ListGender(OleeoUpstreamModel):
    gender_id = models.AutoField(primary_key=True)
    gender_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    destination_model = "application_statistics.Gender"

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_Gender"


class ListJobGrade(OleeoUpstreamModel):
    """
    OLEEO Job Grades are the combination of job grades in a vacancy.

    These get synched to OLEEOGradeGroup in JAO where they can then
    be exploded into individual roles.
    """

    job_grade_id = models.AutoField(primary_key=True)
    job_grade_desc = models.TextField()
    job_grade_shorthand = models.TextField(blank=True, null=True)
    row_last_updated = models.DateTimeField()

    destination_model = "roles.OleeoGradeGroup"

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_JobGrade"


class ListTypeOfRole(OleeoUpstreamModel):
    type_of_role_id = models.AutoField(primary_key=True)
    type_of_role_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    destination_model = "roles.OleeoRoleTypeGroup"

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_TypeOfRole"


class ListLocationType(OleeoUpstreamModel):
    location_type_id = models.AutoField(primary_key=True)
    location_type_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_LocationType"


class ListPostcode(OleeoUpstreamModel):
    postcode_id = models.AutoField(primary_key=True)
    postcode_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_Postcode"


class ListProfession(OleeoUpstreamModel):
    profession_id = models.AutoField(primary_key=True)
    profession_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_Profession"


class ListRegion(OleeoUpstreamModel):
    region_id = models.AutoField(primary_key=True)
    region_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_Region"


class ListReligion(OleeoUpstreamModel):
    religion_id = models.AutoField(primary_key=True)
    religion_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    destination_model = "application_statistics.Religion"

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_Religion"


class ListSexualOrientation(OleeoUpstreamModel):
    sexual_orientation_id = models.AutoField(primary_key=True)
    sexual_orientation_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    destination_model = "application_statistics.SexualOrientation"

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_SexualOrientation"


class ListVacancyApproach(OleeoUpstreamModel):
    vacancy_approach_id = models.AutoField(primary_key=True)
    vacancy_approach_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_VacancyApproach"


class ListVacancyPostcode(OleeoUpstreamModel):
    vacancy_postcode_id = models.AutoField(primary_key=True)
    vacancy_postcode_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_VacancyPostcode"


class ListVacancyStatus(OleeoUpstreamModel):
    vacancy_status_id = models.AutoField(primary_key=True)
    vacancy_status_desc = models.TextField()
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "List_VacancyStatus"


class VacanciesTimestamps(OleeoUpstreamModel):
    vacancy = models.ForeignKey(
        Vacancies, models.DO_NOTHING, db_column="vacancy_id", primary_key=True
    )
    vacancy_created_in_draft_first_in = models.DateTimeField(blank=True, null=True)
    recruitment_review_most_recent = models.DateTimeField(blank=True, null=True)
    recruitment_review_first_in = models.DateTimeField(blank=True, null=True)
    most_recent_posting_live = models.DateTimeField(blank=True, null=True)
    most_recent_posting_closing = models.DateTimeField(blank=True, null=True)
    live_date = models.DateTimeField(blank=True, null=True)
    closing_date = models.DateTimeField(blank=True, null=True)
    last_status_change = models.DateTimeField(blank=True, null=True)
    posting_live_date_latest = models.DateTimeField(blank=True, null=True)
    posting_closing_date_latest = models.DateTimeField(blank=True, null=True)
    sift_results_released = models.DateTimeField(blank=True, null=True)
    sift_results_ready_first_in = models.DateTimeField(blank=True, null=True)
    sift_results_ready_most_recent = models.DateTimeField(blank=True, null=True)
    vacancy_interview_1_results_released = models.DateTimeField(blank=True, null=True)
    interview_2_results_released = models.DateTimeField(blank=True, null=True)
    interview_3_results_released = models.DateTimeField(blank=True, null=True)
    interview_4_results_released = models.DateTimeField(blank=True, null=True)
    interview_1_results_ready_first_in = models.DateTimeField(blank=True, null=True)
    interview_2_results_ready_first_in = models.DateTimeField(blank=True, null=True)
    interview_3_results_ready_first_in = models.DateTimeField(blank=True, null=True)
    interview_4_results_ready_first_in = models.DateTimeField(blank=True, null=True)
    interview_1_results_ready_most_recent = models.DateTimeField(blank=True, null=True)
    interview_2_results_ready_most_recent = models.DateTimeField(blank=True, null=True)
    interview_3_results_ready_most_recent = models.DateTimeField(blank=True, null=True)
    interview_4_results_ready_most_recent = models.DateTimeField(blank=True, null=True)
    vacancy_interview_1_on_hold_first_in = models.DateTimeField(blank=True, null=True)
    vacancy_interview_1_on_hold_most_recent = models.DateTimeField(
        blank=True, null=True
    )
    vacancy_interview_2_on_hold_first_in = models.DateTimeField(blank=True, null=True)
    vacancy_interview_2_on_hold_most_recent = models.DateTimeField(
        blank=True, null=True
    )
    vacancy_interview_3_on_hold_first_in = models.DateTimeField(blank=True, null=True)
    vacancy_interview_3_on_hold_most_recent = models.DateTimeField(
        blank=True, null=True
    )
    vacancy_interview_4_on_hold_first_in = models.DateTimeField(blank=True, null=True)
    vacancy_interview_4_on_hold_most_recent = models.DateTimeField(
        blank=True, null=True
    )
    vacancy_sift_on_hold_first_in = models.DateTimeField(blank=True, null=True)
    vacancy_sift_on_hold_most_recent = models.DateTimeField(blank=True, null=True)
    vacancy_at_interview_1_first_in = models.DateTimeField(blank=True, null=True)
    vacancy_at_interview_1_most_recent = models.DateTimeField(blank=True, null=True)
    vacancy_at_interview_2_first_in = models.DateTimeField(blank=True, null=True)
    vacancy_at_interview_2_most_recent = models.DateTimeField(blank=True, null=True)
    vacancy_at_interview_3_first_in = models.DateTimeField(blank=True, null=True)
    vacancy_at_interview_3_most_recent = models.DateTimeField(blank=True, null=True)
    vacancy_at_interview_4_first_in = models.DateTimeField(blank=True, null=True)
    vacancy_at_interview_4_most_recent = models.DateTimeField(blank=True, null=True)
    vacancy_at_pre_employment_checks_first_in = models.DateTimeField(
        blank=True, null=True
    )
    vacancy_at_pre_employment_checks_most_recent = models.DateTimeField(
        blank=True, null=True
    )
    vacancy_at_sift_first_in = models.DateTimeField(blank=True, null=True)
    vacancy_at_sift_most_recent = models.DateTimeField(blank=True, null=True)
    vacancy_complete_first_in = models.DateTimeField(blank=True, null=True)
    vacancy_complete_most_recent = models.DateTimeField(blank=True, null=True)
    vacancy_created_in_draft_most_recent = models.DateTimeField(blank=True, null=True)
    live_posted_first_in = models.DateTimeField(blank=True, null=True)
    live_posted_most_recent = models.DateTimeField(blank=True, null=True)
    interview_1_results_ready_to_be_released = models.DateTimeField(
        blank=True, null=True
    )
    interview_2_results_ready_to_be_released = models.DateTimeField(
        blank=True, null=True
    )
    interview_3_results_ready_to_be_released = models.DateTimeField(
        blank=True, null=True
    )
    interview_4_results_ready_to_be_released = models.DateTimeField(
        blank=True, null=True
    )
    sift_results_ready_to_be_released = models.DateTimeField(blank=True, null=True)
    vacancy_history_last_changed = models.DateTimeField(blank=True, null=True)
    row_last_updated = models.DateTimeField()

    class Meta:
        managed = False  # Created from a view. Don't remove.
        db_table = "VacanciesTimestamps"
