-- PostgreSQL initialization for vector database
-- This script will be executed after the database is created
-- Template variables: ${database_name}

-- Connect to the specific database
\c ${database_name}

-- Enable required extensions
CREATE EXTENSION IF NOT EXISTS vector;
CREATE EXTENSION IF NOT EXISTS pg_stat_statements;
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- Create a schema for application data
CREATE SCHEMA IF NOT EXISTS app_data;

-- Create a schema for vector operations
CREATE SCHEMA IF NOT EXISTS vector_ops;

-- Create a role for application access
DO $$
BEGIN
    IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'app_user') THEN
        CREATE ROLE app_user WITH LOGIN PASSWORD 'change_me_in_production';
    END IF;
END
$$;

-- Grant permissions
GRANT USAGE ON SCHEMA app_data TO app_user;
GRANT USAGE ON SCHEMA vector_ops TO app_user;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA app_data TO app_user;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA vector_ops TO app_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA app_data GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;
ALTER DEFAULT PRIVILEGES IN SCHEMA vector_ops GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO app_user;

-- Create a table for document embeddings
CREATE TABLE IF NOT EXISTS vector_ops.embeddings (
    id SERIAL PRIMARY KEY,
    document_id VARCHAR(100) NOT NULL,
    embedding VECTOR(1536) NOT NULL,  -- OpenAI's text-embedding-ada-002 dimensions
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    metadata JSONB
);

-- Create a table for storing documents
CREATE TABLE IF NOT EXISTS app_data.documents (
    id VARCHAR(100) PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT NOT NULL,
    document_type VARCHAR(50) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    metadata JSONB
);

-- Create indexes for improved query performance
CREATE INDEX IF NOT EXISTS idx_documents_document_type ON app_data.documents(document_type);
CREATE INDEX IF NOT EXISTS idx_documents_created_at ON app_data.documents(created_at);
CREATE INDEX IF NOT EXISTS idx_embeddings_document_id ON vector_ops.embeddings(document_id);

-- Create an HNSW index for fast approximate similarity search
CREATE INDEX IF NOT EXISTS idx_embeddings_hnsw ON vector_ops.embeddings 
USING hnsw (embedding vector_cosine_ops) 
WITH (ef_construction = 128, m = 16);

-- Create functions for updating timestamps
CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create triggers for timestamps
CREATE TRIGGER set_timestamp_documents
BEFORE UPDATE ON app_data.documents
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

CREATE TRIGGER set_timestamp_embeddings
BEFORE UPDATE ON vector_ops.embeddings
FOR EACH ROW
EXECUTE FUNCTION update_modified_column();

-- Create a function for similarity search
CREATE OR REPLACE FUNCTION vector_ops.search_similar_documents(
    query_embedding VECTOR(1536),
    match_threshold FLOAT DEFAULT 0.7,
    match_count INT DEFAULT 10
)
RETURNS TABLE(
    document_id VARCHAR(100),
    title TEXT,
    content TEXT,
    similarity FLOAT,
    document_type VARCHAR(50),
    metadata JSONB
) AS $$
BEGIN
    RETURN QUERY
    SELECT
        d.id AS document_id,
        d.title,
        d.content,
        (1 - (e.embedding <=> query_embedding)) AS similarity,
        d.document_type,
        d.metadata
    FROM
        vector_ops.embeddings e
    JOIN
        app_data.documents d ON e.document_id = d.id
    WHERE
        (1 - (e.embedding <=> query_embedding)) > match_threshold
    ORDER BY
        similarity DESC
    LIMIT match_count;
END;
$$ LANGUAGE plpgsql;

-- Set session parameters for optimal performance
ALTER DATABASE ${database_name} SET pg_stat_statements.track = 'all';
ALTER DATABASE ${database_name} SET pg_stat_statements.max = 10000;
ALTER DATABASE ${database_name} SET track_activity_query_size = 4096;
ALTER DATABASE ${database_name} SET log_statement = 'ddl';
ALTER DATABASE ${database_name} SET track_io_timing = 'on';

-- Create an example document and embedding
INSERT INTO app_data.documents (id, title, content, document_type, metadata)
VALUES (
    'example-doc-001',
    'Example Document',
    'This is an example document to test the vector database setup.',
    'example',
    '{"source": "initialization", "importance": "low"}'::jsonb
) ON CONFLICT (id) DO NOTHING;

-- Insert a random embedding vector for the example document
-- In a real application, this would be generated by an embedding model
WITH random_vector AS (
    SELECT array_agg(2 * random() - 1) AS vec FROM generate_series(1, 1536)
),
normalized_vector AS (
    SELECT vec / sqrt(sum(x * x)) AS norm_vec
    FROM random_vector, unnest(vec) AS x
)
INSERT INTO vector_ops.embeddings (document_id, embedding, metadata)
SELECT 
    'example-doc-001', 
    norm_vec::vector, 
    '{"model": "example-random-vector"}'::jsonb
FROM normalized_vector
ON CONFLICT DO NOTHING;

-- Final setup message
DO $$
BEGIN
    RAISE NOTICE 'PostgreSQL vector database initialization complete for database: %', '${database_name}';
END $$;